
template <>
struct IsDouble<double> {
	static constexpr bool result = true;
};

template <>
struct IsDouble<int> {
	static constexpr bool result = false;
};

template<>
struct PickDouble;

template<> struct PickDouble<true> {
	using result = double;
};

template<> struct PickDouble<false> {
	using result = int;
};

// Q: How do you write a function that returns a type?
// A: By returning a struct w/ a nested type!

// See the similarity?
// One returns a value given a type
// The other returns a type given a value.
// Template specialization allows us to do both of these!

template <typename T>
struct WhatType {
	static constexpr value = IsDouble<t>::result;
	using result = PickDouble<value>::result;
};

// Compare two values and find the max
// The types may be different!!!

// Chase: I'm willing to deal with this syntactic nastiness when I am developing a template metaprogram (TMP)
// However, if I'm the client/user of this function, I don't want to deal with it.
template <typename T1, typename T2> 
typename WhatType<T1>::result max(T1 const& x, T2 const& y) {

};

// Stroustroup's trick for simplifying the above function:
// We can just use capital letters because the STL has no capital letters in its function names.
// At the very least, the template functions don't.
template <typename T>
using WhatType = typename whatType<T>::result;

template <typename T1, typename T2>
WhatType<T1> max(T1 const& x, T2 const& y) {
	if (x < y) { return y; }
	else { return x; }
};

// A takeaway from this class!!!
// TEMPLATES ARE WRITE-ONLY CODE!!! (or at least TMP)
// Therefore, don't use TMP unless you have to...

// One way to make templated code more readable is to alias templated return types.
// Which is good and simplifies things :D

template <typename>
struct SRank;

// static constexpr int value is a compile-time constant!!!
// Thus, we shouldn't define SRank to have a 'value' parameter.
template <> struct SRank<int> { static constexpr int value = 1; }
template <> struct SRank<float> { static constexpr int value = 2; }
template <> struct SRank<double> { static constexpr int value = 3; }
template <typename T> struct SRank<complex<T>> {
	static constexpr int value = 
};

template <int>
SType;

// double > float > int in terms of type promotion in this case.
template<> struct SType<1> { using type = int; };
template<> struct SType<2> { using type = float; };
template<> struct SType<3> { using type = double; };

template <typename T1, typename T2>
struct choose_type {
	
o
	// Enum variant of computing max_rank
	// It ends up working at runtime? or compile-time, not sure.
	// Chase says to not do this, as the constexpr variant is simpler!
	/*enum {
		rank1 = SRank<T1>::value,
		rank2 = SRank<T2>::value,
		max = (t1_rank > t2_rank) ? t1_rank : t2_rank;
	};*/
	static constexpr int t1_rank = SRank<T1>::value;
	static constexpr int t2_rank = SRank<T2>::value;
	// static constexpr int max_rank (t1_rank > t2_rank) ? t1_rank : t2_rank;
	static constexpr int max_rank = bax(t1_rank, t2_rank);

	using type = typename SType<max_rank>::type;
};

template <typename T1, typename T2>
using ChooseType = typename choose_type<T1, T2>::type;


// Overloaded template function!
// Like any overloading, the compiler tries to pick the best type.
// The template functions themselves are being specialized.
template <typename T1, typename T2>
ChooseType<T1, T2> bax(T1 const& x, T2 const& y) {
	if (x < y) { return y; }
	else { return x; }
}

template <typename T>
constexpr T bax(T const& x, T const& y) {
	return (x < y) ? y : x;
}





template <typename T>
struct is_reference {
	static constexpr bool value = is_lreference<T>::value
		|| is_rreference<T>::value;
};

template <typename T>
void doit(T&& x) {
	if (!is_reference<T>::value) {
		cout << "can't change it!\n";
	}
}

