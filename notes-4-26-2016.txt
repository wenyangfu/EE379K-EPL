/* I came in late to lecture, around 11:35. */

line 42:
template <typename T>
void check_bracket(void) {
	cout << std::boolapha;
	cout << eval<HasBracket<T>>() << endl;
}

struct Hack {
	void foo(int) {}
};

template <typename T, typename test = decltype(declval<T>().foo)>
TRUE has_foo(void) { return TRUE{}; }

template <typename T, typename... not_used>
FALSE has_foo(not_used...) { return FALSE{}; }

int main(void) {
	has_op_bracket<int>();
	check_bracket<int>();
	check_bracket<int*>();

}

template <typename... T>
struct Tuple;

// You can't have a empty tuple, that would be silly..
// However, we will specialize a template for a tuple with a single type.
template <typename T>
struct Tuple<T> {
	T val;
};

// First template argument is stored in the derived class,
// but the rest of the template arguments are stored in the base class.
template <typename T, typename... OtherArgs>
struct Tuple<T, OtherArgs...> : public Tuple<OtherArgs...> {
	T val;
};

int main(void) {
	Tuple<int> x;
	x.val = 42;
	Tuple<int, std::string> y;
	y.val = 0;

	// When to use Tuple?
	// When we don't care enough about the return type of a function (or whatever) to make a top-level
	// struct for it!
	// auto fred = getValue(); // type = Tuple<int, int, int, char*, double>

	Tuple<std::string>& y_tail = y;
	y_tail.val = "Hello World";

	Tuple<int, double, std::string> z;
}

template <int index, typename T>
struct loop {
	static constexpr int value = 1 + loop<index - 1, T>::value;
};

template <typename T> struct loop<0, T> {
	static constexpr int value = 1;
};

// Compile-time constant..
int x[loop<6, int>::value];

vodi test2point5(void) {
	cout << loop<42, int>::value << endl;
}


// We would like to write a template metafunction
// that allows us to find the Nth field of a tuple.
// To do this, we will need to perform N-1th typecasts towards the base class.

template <typename T> struct tail_tuple;

template <typename T, typename... Tail> struct tail_tuple<Tuple<T, Tail...>> {
	using type = Tuple<Tail...>;
};

// Two specializations:
// one for a final base case
// one for the recursive implementation
// Chase would give full credit on an exam for this

template <int index, typename T, typename... Tail>
struct tuple_loop <index, Tuple<T, Tail...>> {
	using short_tuple = typename tail_tuple<T>::type;
	using type = typename tuple_loop<index - 1, short_tuple>::type;

	static type& extract(T& arg) {
		return tuple_loop<index - 1, short_Tuple>::extract(arg);
	}
};

template <typename T>
struct tuple_loop<0, T> {
	using type = decltype(declval<T>().val);
	static type& extract(T& arg) { return arg.val; }
};

void main(void) {
	using T = Tuple<int, std::string>;
	using test = tuple_loop<0, T>::type;

	T x;

	tuple_loop<0, T>::extract(x) = 14;

}